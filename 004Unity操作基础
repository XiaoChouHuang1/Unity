1.	菜单:  
2.	1.file用来创建,保存场景  创建.保存工程 打包设置  
3.	edit:复制,拷贝,开始结束暂停,下一帧程序  
4.	Assert :导入,导出资源  
5.	GameObject :创建各种3d物体  
6.	component:(组建):用来给物体添加各种组件  
7.	windows:视图设置,烘焙设置  
8.	标题栏:  
9.	第一个:用来移动场景(q)  
10.	第二个:用来移动物体(w)  
11.	第三个:用来旋转物体(e)  
12.	第四个:用来缩放物体(r)  
13.	第五个:用来操作ui(t)  
14.	第六个:设置轴心点  
15.	第七个:位置的坐标系统(世界和自身)  
16.	第八个:开始结束程序  
17.	第九个:暂停程序  
18.	第十个:下一帧程序  
19.	layer:设置显示的层级  
20.	layout:编译器的布局;  
21.	鼠标滚动轮:用来拉近拉远相机   
22.	ait+鼠标左键:旋转场景;(世界为中心)(旋转世界)  
23.	鼠标右键:以相机为中心,旋转(相机进行左右旋转)  
24.	hierarchy(层级视图):以列表的形式显示当前场景中的物体  
25.	Scene:编辑视图,操作当前场景的物体  
26.	Game:运行视图,程序执行的效果图  
27.	Project:存放整个工程的资源(脚本,场景,图片.模型....)  
28.	inspector :显示某个物体的属性  
29.	command+s:保存场景  
30.	command+n:新建场景  
31.	工程文件夹:  
32.	Assets:存放游戏中所有资源(不能删除)  
33.	ProjectSettings:游戏工程的配置(不能删除)  
34.	(其他的都可以删除)  
35.	创建物体:  
36.	点击gameobject->选择3d物体进行创建  
37.	在hierarchy面板中点击鼠标右键->选择3d物体进行创建  
38.	删除:直接点击删除  
39.	重命名:  
40.	鼠标左键双击 ,enter键,右键rename;  
41.	transfrom(组件):  
42.	position:物体的位置  
43.	rotation:物体的旋转  
44.	Scale:物体的缩放(尽量不要修改缩放)  
45.	unity中的物理引擎(初级):  
46.	刚体:物理世界的刚体  
47.	注意:刚体(Rigidbody)必须和游戏中的物体同时使用,刚体是以组件的形式存储在物体上,游戏中物体有刚体组件,那么就会受到自然界的约束.  
48.	如何给物体添加刚体组件?  
49.	组件属性:  
50.	1,mass:表示刚体的质量(浮点)  
51.	2,drag 表示刚体的阻力(物体移动的阻力)  
52.	3Angular Drag 表示刚体的阻力(物体旋转的阻力)  
53.	4,Use gravity:是否使用重力  
54.	5,is Kinematic: 是否遵循运动学(true flase)   如果为true:只收到脚本和动画的影响,如果为flase 会受到自然界的约束  
55.	6,interpolate  渲染默认为none(插值方式)  
56.	7,collision Detection :碰撞检测模式(目的为了防止击穿)  
57.	Discrete 适用于静止或者移动较慢的物体  
58.	continuous Dynamic :适用于较小或者移动较快的物体  
59.	constraints :约束某个轴上的移动和旋转  
60.	*****发生碰撞的条件  
61.	1.两个物体发生碰撞的条件,某一个物体必须有刚体(可以两个物体都有)  
62.	1.碰撞的两个物体必须都有collider   
63.	collider 碰撞器  
64.	is trigger  
65.	选中状态:勾选is trigger 无碰撞效果的碰撞  
66.	未选中状态:有碰撞效果的碰撞  
67.	赛车时(在中途设置碰撞,检验是否在此通过,勾选is trigger 但是不用发生碰撞效果)  
68.	window lignting (skybox)  切换所有场景的天空盒子  
69.	camera add skybox  将做好的天空盒子添加到当前场景  
70.	创建自己的天空盒子    
71.	创建materials   
72.	standard   ->skybox->6sides  
73.	command shift 4  截屏   
74.	注意\: 当场景切换时需要把事件移除  
75.	1,easytouch 之摇杆  
76.	使用方法 :导入插件,点击菜单中的hedeghogTeam ->EasyTouch->Extension ->adding a new  
77.	joyStick ->修改摇杆的joystick axes properties&events->interaction type 为event Notification  
78.	->脚本编写代码  
79.	2.EasyTouch之按键  
80.	使用方法:导入插件,点击菜单中的hedeghogTeam->easytouch ->extension  
81.	->adding  new button ->脚本编写代码  
82.	注意:场景消失 ,把注册的事件移除  
83.	天空盒子  
84.	1.给相机挂在天空盒子,仅仅某个相机有自定义的天空盒子,整个场景不发生改变,如果切换相机,新的相机中将展示原来的天空盒子,需要重新添加  
85.	方法:点击相机-> addComponent ->skyBox->选择天空盒子  
86.	2,给场景挂在天空黑子,让整个场景自定义天空盒子,切换相机不需要重新添加  
87.	方法:点击windows->lighting->Scene->选择天空盒子  
88.	自定义天空盒子:在project中点击右键->create->materials->点击shader后面的下拉->skybox->6sides->设置6个方向的图片保存 ->用上述两种方法添加天空盒子  
89.	第一，导入的时候记得勾上导入媒体。  
90.	第二，导入的位置要放在unity的工程文件里，这样unity会自动给你检测贴图文件。  
91.	第三，导入成功以后要手动调整shade  
92.	相机属性:   
93.	1,clear Flags (清除标记):背景墙显示的模式  
94.	2,culling Mask:设置相机渲染的层级 (看见哪一层)  
95.	3,projection :相机投射的方式  
96.	4,field of view:相机视野的大小  
97.	5,clipping :相机投射的最大最小的距离  
98.	6,viewPort分屏显示:以多大的比例在game视图中显示内容  
99.	7,depth :深度控制相机的渲染顺序,数值越大,最后渲染  
100.	(自己)  
101.	rendingpath 设置渲染路径 不需要修改  
102.	target Texture :设置相机投射的目标  
103.	w 宽度 1 为整个宽度 0.几为%比的宽度  
104.	h 高度1 为整个高度 0.几 为%比的高度  
105.	(在game视图中调试查看,做分屏使用)  
106.	x 在x轴的%之多少的位置开始显示  
107.	(数值越是小,越先渲染)  
108.	数值越是大,渲染越晚,渲染晚的会覆盖渲染早的,所以depth 越大就会显示哪个在场景中  
109.	player1玩家的脚本A    player2玩家的脚本B      
110.	在A脚本通过B的脚本实例  获取其组件以及添加组件 添加子物体 添加脚本的方法  
111.	1,直接通过脚本实例 ,获取  
112.	2.通过脚本实例先获取其对象,再用对象获取  
113.	为什么大多数的组件可以通过transfrom组件获得呢?  
114.	因为tranfrom 组件是每个物体必须都有的,所以使用transfrom最为安全  
115.	sprite(精灵):展示图片控件(展示图集中的图片)  
116.	sliced裁剪  
117.	tield 在某个方向复制(网格的形式)  
118.	filled 技能冷却  
119.	snap 原始的大小  
120.	制作的所有图集  
121.	Simple texture(纹理)展示图片控件(用来展示单张图片)  
122.	展示较大的图片(非图集中的图片)  
123.	label最好选择ngui的字体否则打包时容易出错  
124.	shrink 标签大小固定,字越多,就越小  
125.	resize freely 横向自动扩充  
126.	resize freely纵向自动扩充  
127.	字体的位置  
128.	左,中,右 自动  
129.	文字的上半部分颜色  
130.	下半部分的颜色  
131.	color tint 整体的颜色  
132.	字体x轴的空格间隔  
133.	Label 文本展示控件  
134.	Go[99ff00]Fast[-]Pig  
135.	让fast为副文本 数字为设置的颜色  减号为结束标志  
136.	fo[s]fast[/s]jhlkj                 fast文字上有横线  
137.	百度   副文本  
138.	是否阴影  
139.	TypeWriter Effect 打字机效果  
140.	1.每秒出现的字符  
141.	2,逐渐出现需要的时间  
142.	问题描述：  
143.	        添加一个文本，使其能够在被点击时打开某个网址。附加功能：对文字进行一些类似Html文本的操作。  
144.	解决方案：  
145.	         1.需要对Label添加组件“OpenURLOnClick”；  
146.	         2.需要添加组 件"BoxCollider"，并选择Is Trigger，同时将其大小设为和Label大小相同；   
147.	         3.在需要外链的字体中加入点我进百度 即可；   
148.	         4.可以对文字进行类似Html文本的操作，如[u]xxx[/u]为下划线、[b]xxx[/b]为加粗、[i]xxx[/i]为斜体、[00ff00]xxx[-]为改变xxx颜色为00ff00等等操作。     
149.	         5..举例：  
150.	          [u]中国首都[/u]中国的首都是[000000][b][i]北京[/b][/i][-]，北京有[u]天安门[/u]，天安门上有红旗飘扬。  
151.	  
152.	先制作图集.  选择一张sprite  
153.	ngui   ui spriteanimation  
154.	精灵镇动画  
155.	heroInfo :数据模型(程序中使用的数据字段)  
156.	createHeroInfo :获取数据模型(给数据模型初始化字段),单例类(保证heroInfo在工程中就一个)  
157.	英雄类,英雄信息类 ,管理英雄信息的单例类  
158.	视图操作:  
159.	MyPanel:管理子视图(分数和声明的图片)  
160.	myLifeShow:控制显示声明的图片  
161.	button :按钮(点击触发事件)  
162.	normal 正常  
163.	hover 获得焦点  
164.	UIButton->color:设置按钮的颜色  
165.	UIButton->sprite:设置按钮的图片显示  
166.	UIButton->设置按钮的触发事件  
167.	1,给按钮添加collider(注意collider的大小)  
168.	2,给按钮添加button脚本  
169.	3,设置触发的方法(两种);  
170.	Notify 事件通知  
171.	按钮制作:  
172.	添加sprite,添加boxCollider 添加button脚本  
173.	事件通知 ,添加为button ,方法为自己的脚本下   
174.	需要调用的方法  
175.	InputField:输入框 (通过键盘输入内容)  
176.	1,添加collider  
177.	2,添加inputFieldScripts  
178.	3,添加子物体label(注意字体的大小)  
179.	4,设置子物体label为inputFieldScripts的属性label  
180.	5,根据uiinput的value属性,获取输入框的输入内容  
181.	创建sprite 添加boxcollider 添加uibutton uiinput 等  
182.	如果都在uiroot 下同一级,需要先查找再获取其组件  
183.	如果脚本在uiroot上,直接获取子物体getcomponentiNChildren  
184.	在button按钮之上,拖root时,会自动获取root上的脚本  
185.	(先创建sprite)slider:滑动条  
186.	1,添加collider  
187.	2.添加sliderScripts  
188.	PopupList  下拉列表  
189.	1,创建sprite ,添加boxcollider  
190.	2.添加uiPopup list  
191.	3,创建label为其子物体  
192.	事件通知,将子物体label拉倒notify,选择设置当前选择(setCurrentSelect),即可显示自己的下拉选择  
193.	Time.time;从游戏开始的总时间  
194.	容器:Widget Pannel  
195.	widget:容器(存放子控件)  
196.	1,属性pivot:设置中心点    
197.	注意:  
198.	 (控件的中心点,创建时,默认是与2d屏幕的中心点重合,如果移动控件的中心点,中心点往哪移动,控件往相反的方向移动)  
199.	注意:设置控件的位置,就是设置控件的中心点的位置  
200.	2,属性Depth:深度(值越大,越靠近相机)  
201.	3,设置控件的大小  
202.	4.属性Aspect:根据宽修改高,或者相反  
203.	5,Anchors 锚点:适配  
204.	pannel:容器,存放子控件  
205.	注意:  
206.	cliping (widget中没有)(可以隐藏容器外部的内容)  
207.	texture Mask 裁切  
208.	scroll View  滚动视图控件   
209.	1,先创建一个container  
210.	2,创建一个sprite(用来做背景  目的:漂亮)  
211.	3,创建一个ScrollView(注意裁切)  
212.	     (1)Content Origin 内容开始的点  
213.	    (2)Movement:滑动的方向(设置左右还是上下滑动)  
214.	    (3),ScrollBars->Horizontal:水平滑动的进度条  
215.	4,在scrollView中创建Grid(用来对主内容进行排列)  
216.	    (1)Arrangement :排列的方向   
217.	    (2)Cell Width :物体占用空间的宽  
218.	    (3)Cell Height:物体占用空间的高  
219.	    (4)Column/Row Limit:行/列的限制  
220.	5,在ScrollView 下创建你一些子物体  
221.	6.把刚才创建的所有物体设置为grid 的子物体  
222.	7,设置grid 排列  
223.	8,调整grid位置  
224.	9,给所有物体添加collider(注意自动适配碰撞器)  
225.	10,给所有子物体添加Drag Scroll View  
226.	晃动条: 与scroolView 同级   
227.	设置背景 滑块  添加boxcollider\ 添加scroolBar  拖到 scroolView 的水平或者竖直上  
228.	window ->Lighting->Scene->去掉AUTO(切换如哪个场景,就去改哪个场景)  
229.	图集:选中图片->点击Ngui->open->Atlas Master->New ->Create  
230.	字体集:点击ngui ->open ->fontMaker ->选中字体类型 (bitmap和Dynamic)  
231.	titmap 只能显示已经有的文字(植物大战僵尸)   dynamic 是已经导入的字体  
232.	Anchors   
233.	图片在左上角时 :图片的左边到屏幕慕的左边距离保持不变 图片的下部.上部与屏幕的上边保持不变  
234.	    右上角时:图片的左边到屏幕慕的右边距离保持不变 图片的下部.上部与屏幕的上边保持不变  
235.	    左下        :图片的左边到屏幕慕的左边距离保持不变 图片的下部.上部与屏幕的下边保持不变  
236.	    右下    :图片的左边到屏幕慕的右距离保持不变 图片的下部.上部与屏幕的下边保持不变  
237.	约束宽  或者高    
238.	约束宽时  
239.	屏幕的宽/资源图片的宽=缩放因子         图片放大  缩放因子  倍数  
240.	资源图片的高*缩放因子=图片实际显示的高  与  屏幕的高做对比,大了那么超出屏幕,小了出现黑屏  
241.	anchors:调整到目标的距离  
242.	适配:  
243.	1,根据宽,修改稿(图片宽和屏幕款保持一致,修改高的显示i)  
244.	资源的宽/屏幕的宽=缩放因子  
245.	资源高/缩放因子=资源缩放后的高的大小  
246.	用资源缩放后高的大小和屏幕的高进行对比->得出显示效果  
247.	2.根据高,修改宽(图片高和屏幕款保持一致,修改宽的显示i)  
248.	资源高/屏幕高=缩放因子  
249.	资源宽/缩放因子=资源缩放后宽的大小  
250.	用资源缩放后宽的大小和屏幕的宽比较,得出显示效
251.	

